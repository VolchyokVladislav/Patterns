"""Один из самых известных и, пожалуй, самых спорных паттернов.
Представьте, что в городе требуется организовать связь между жителями. С одной стороны мы можем связать всех жителей
между собой протянув между ними кабели телефонных линий, но полагаю вы понимаете насколько такая система неверна.
 Например, как затратно будет добавить еще одного жителя в связи (протянуть по еще одной линии к каждому жителю).
 Чтобы этого избежать, мы создаем телефонную станцию, которая и будет нашим «одиночкой». Она одна, всегда, и если
 кому-то потребуется связаться с кем-то, то он может это сделать через данную телефонную станцию, потому что все
 обращаются только к ней. Соответственно для добавления нового жителя нужно будет изменить только записи на самой
 телефонной станции. Один раз создав телефонную станцию все могут пользоваться ей и только ей одной, в свою очередь
  эта станция помнит всё что с ней происходило с момента ее создания и каждый может воспользоваться этой информацией,
  даже если он только приехал в город.
Основной смысл «одиночки» в том, чтобы когда вы говорите «Мне нужна телефонная станция», вам бы говорили «Она уже
построена там-то», а не «Давай ее сделаем заново». «Одиночка» всегда один.
"""

def singleton(cls):
    global instance
    instance = {}
    def getinstance():
        if cls not in instance:
            instance[cls] = cls()
        return instance[cls]
    return getinstance()

@singleton
class AnyClass:
    pass




